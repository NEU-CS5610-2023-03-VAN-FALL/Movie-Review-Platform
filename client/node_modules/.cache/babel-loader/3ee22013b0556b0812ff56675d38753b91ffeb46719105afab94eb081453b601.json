{"ast":null,"code":"var _jsxFileName = \"/Users/limingxi/Documents/5610/assignment-03-mingxi-li/client/src/components/MovieSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieSearch = ({\n  movie\n}) => {\n  _s();\n  const [error, setError] = useState(null);\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    const fetchMovieData = async () => {\n      try {\n        const response = await fetch(\"https://movie-database-alternative.p.rapidapi.com/?s=Avengers Endgame&r=json&page=1\", {\n          method: \"GET\",\n          headers: {\n            \"X-RapidAPI-Key\": \"0fce791ab6msh6f1b63a932f1ed3p1ef0b5jsn414243b1e98c\",\n            \"X-RapidAPI-Host\": \"movie-database-alternative.p.rapidapi.com\"\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch movie data\");\n        }\n        const data = await response.json();\n        setSearchResults(data);\n      } catch (error) {\n        console.error(\"Error fetching movie data:\", error);\n        setError(\"Failed to fetch movie data\");\n      }\n    };\n    fetchMovieData();\n  }, []); // Empty dependency array ensures the effect runs only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Movie Search Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: searchResults && searchResults.Search && searchResults.Search.length > 0 && searchResults.Search.map(result => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Title: \", result.Title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Year: \", result.Year]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Type: \", result.Type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: result.Poster,\n          alt: `Poster for ${result.Title}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this)]\n      }, result.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieSearch, \"oJJrMh9yR9C6dcdHPX3NJZb7WZ8=\");\n_c = MovieSearch;\nexport default MovieSearch;\nvar _c;\n$RefreshReg$(_c, \"MovieSearch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MovieSearch","movie","_s","error","setError","searchResults","setSearchResults","fetchMovieData","response","fetch","method","headers","ok","Error","data","json","console","children","fileName","_jsxFileName","lineNumber","columnNumber","Search","length","map","result","Title","Year","Type","src","Poster","alt","imdbID","_c","$RefreshReg$"],"sources":["/Users/limingxi/Documents/5610/assignment-03-mingxi-li/client/src/components/MovieSearch.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst MovieSearch = ({ movie }) => {\n  const [error, setError] = useState(null);\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    const fetchMovieData = async () => {\n      try {\n        const response = await fetch(\n          \"https://movie-database-alternative.p.rapidapi.com/?s=Avengers Endgame&r=json&page=1\",\n          {\n            method: \"GET\",\n            headers: {\n              \"X-RapidAPI-Key\": \"0fce791ab6msh6f1b63a932f1ed3p1ef0b5jsn414243b1e98c\",\n              \"X-RapidAPI-Host\": \"movie-database-alternative.p.rapidapi.com\",\n            },\n\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch movie data\");\n        }\n\n        const data = await response.json();\n        setSearchResults(data);\n      } catch (error) {\n        console.error(\"Error fetching movie data:\", error);\n        setError(\"Failed to fetch movie data\");\n      }\n    };\n\n    fetchMovieData();\n  }, []); // Empty dependency array ensures the effect runs only once on component mount\n\n  return (\n    <div>\n      <h2>Movie Search Results</h2>\n      {error && <p>{error}</p>}\n      <ul>\n        {searchResults && searchResults.Search && searchResults.Search.length > 0 && (\n          searchResults.Search.map((result) => (\n            <li key={result.imdbID}>\n              <p>Title: {result.Title}</p>\n              <p>Year: {result.Year}</p>\n              <p>Type: {result.Type}</p>\n              <img src={result.Poster} alt={`Poster for ${result.Title}`} />\n            </li>\n          ))\n        )}\n      </ul>\n    </div>\n  );\n   \n};\n\nexport default MovieSearch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}