{"ast":null,"code":"var _jsxFileName = \"/Users/limingxi/Documents/5610/assignment-03-mingxi-li/client/src/components/MovieSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../style/moviesearch.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieSearch = ({\n  movie\n}) => {\n  _s();\n  const [error, setError] = useState(null);\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    const fetchMovieData = async () => {\n      try {\n        const options = {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '0fce791ab6msh6f1b63a932f1ed3p1ef0b5jsn414243b1e98c',\n            'X-RapidAPI-Host': 'movie-database-alternative.p.rapidapi.com'\n          }\n        };\n        const response = await fetch(`https://movie-database-alternative.p.rapidapi.com/?s=${encodeURIComponent(movie.title)}&r=json&page=1`, options);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch movie data\");\n        }\n        const data = await response.json();\n        setSearchResults(data);\n      } catch (error) {\n        console.error(\"Error fetching movie data:\", error);\n        setError(\"Failed to fetch movie data\");\n      }\n    };\n    fetchMovieData();\n    console.log();\n  }, [movie]); // \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-search-results-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Movie Search Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this), searchResults && searchResults.Search && searchResults.Search.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Title: \", searchResults.Search[0].Title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Year: \", searchResults.Search[0].Year]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Type: \", searchResults.Search[0].Type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: searchResults.Search[0].Poster,\n        alt: `Poster for ${searchResults.Search[0].Title}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieSearch, \"oJJrMh9yR9C6dcdHPX3NJZb7WZ8=\");\n_c = MovieSearch;\nexport default MovieSearch;\nvar _c;\n$RefreshReg$(_c, \"MovieSearch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MovieSearch","movie","_s","error","setError","searchResults","setSearchResults","fetchMovieData","options","method","headers","response","fetch","encodeURIComponent","title","ok","Error","data","json","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Search","length","Title","Year","Type","src","Poster","alt","_c","$RefreshReg$"],"sources":["/Users/limingxi/Documents/5610/assignment-03-mingxi-li/client/src/components/MovieSearch.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../style/moviesearch.css\";\n\nconst MovieSearch = ({ movie }) => {\n  const [error, setError] = useState(null);\n  const [searchResults, setSearchResults] = useState([]);\n\n  useEffect(() => {\n    const fetchMovieData = async () => {\n      try {\n        const options = {\n          method: 'GET',\n          headers: {\n            'X-RapidAPI-Key': '0fce791ab6msh6f1b63a932f1ed3p1ef0b5jsn414243b1e98c',\n            'X-RapidAPI-Host': 'movie-database-alternative.p.rapidapi.com',\n          },\n        };\n\n        const response = await fetch(\n          `https://movie-database-alternative.p.rapidapi.com/?s=${encodeURIComponent(movie.title)}&r=json&page=1`,\n          options\n        );\n\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch movie data\");\n        }\n\n        const data = await response.json();\n        setSearchResults(data);\n      } catch (error) {\n        console.error(\"Error fetching movie data:\", error);\n        setError(\"Failed to fetch movie data\");\n      }\n    };\n\n    fetchMovieData();\n    console.log()\n  }, [movie]); // \n\n  return (\n    <div className=\"movie-search-results-container\">\n      <h2>Movie Search Results</h2>\n      {error && <p>{error}</p>}\n      {searchResults && searchResults.Search && searchResults.Search.length > 0 && (\n        <div className=\"movie-result\">\n          <p>Title: {searchResults.Search[0].Title}</p>\n          <p>Year: {searchResults.Search[0].Year}</p>\n          <p>Type: {searchResults.Search[0].Type}</p>\n          <img\n            src={searchResults.Search[0].Poster}\n            alt={`Poster for ${searchResults.Search[0].Title}`}\n          />\n        </div>\n      )}\n    </div>\n  );\n  \n   \n};\n\nexport default MovieSearch;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd,MAAMU,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,OAAO,GAAG;UACdC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,gBAAgB,EAAE,oDAAoD;YACtE,iBAAiB,EAAE;UACrB;QACF,CAAC;QAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,wDAAuDC,kBAAkB,CAACZ,KAAK,CAACa,KAAK,CAAE,gBAAe,EACvGN,OACF,CAAC;QAED,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;QAC/C;QAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClCZ,gBAAgB,CAACW,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOd,KAAK,EAAE;QACdgB,OAAO,CAAChB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDC,QAAQ,CAAC,4BAA4B,CAAC;MACxC;IACF,CAAC;IAEDG,cAAc,CAAC,CAAC;IAChBY,OAAO,CAACC,GAAG,CAAC,CAAC;EACf,CAAC,EAAE,CAACnB,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEb,oBACEF,OAAA;IAAKsB,SAAS,EAAC,gCAAgC;IAAAC,QAAA,gBAC7CvB,OAAA;MAAAuB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC5BvB,KAAK,iBAAIJ,OAAA;MAAAuB,QAAA,EAAInB;IAAK;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBrB,aAAa,IAAIA,aAAa,CAACsB,MAAM,IAAItB,aAAa,CAACsB,MAAM,CAACC,MAAM,GAAG,CAAC,iBACvE7B,OAAA;MAAKsB,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BvB,OAAA;QAAAuB,QAAA,GAAG,SAAO,EAACjB,aAAa,CAACsB,MAAM,CAAC,CAAC,CAAC,CAACE,KAAK;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7C3B,OAAA;QAAAuB,QAAA,GAAG,QAAM,EAACjB,aAAa,CAACsB,MAAM,CAAC,CAAC,CAAC,CAACG,IAAI;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3C3B,OAAA;QAAAuB,QAAA,GAAG,QAAM,EAACjB,aAAa,CAACsB,MAAM,CAAC,CAAC,CAAC,CAACI,IAAI;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3C3B,OAAA;QACEiC,GAAG,EAAE3B,aAAa,CAACsB,MAAM,CAAC,CAAC,CAAC,CAACM,MAAO;QACpCC,GAAG,EAAG,cAAa7B,aAAa,CAACsB,MAAM,CAAC,CAAC,CAAC,CAACE,KAAM;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAIV,CAAC;AAACxB,EAAA,CAvDIF,WAAW;AAAAmC,EAAA,GAAXnC,WAAW;AAyDjB,eAAeA,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}