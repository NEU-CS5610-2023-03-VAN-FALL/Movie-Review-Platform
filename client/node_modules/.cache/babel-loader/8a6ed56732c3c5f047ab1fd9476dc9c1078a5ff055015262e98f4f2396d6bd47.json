{"ast":null,"code":"var _jsxFileName = \"/Users/limingxi/Documents/5610/assignment-03-mingxi-li/client/src/components/MovieSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieSearch = ({\n  searchResults,\n  setSearchResults\n}) => {\n  _s();\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchMovieData = async () => {\n      try {\n        const response = await fetch(\"https://movie-database-alternative.p.rapidapi.com/?s=Avengers Endgame&r=json&page=1\", {\n          method: \"GET\",\n          headers: {\n            \"X-RapidAPI-Key\": \"0fce791ab6msh6f1b63a932f1ed3p1ef0b5jsn414243b1e98c\",\n            \"X-RapidAPI-Host\": \"movie-database-alternative.p.rapidapi.com\"\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch movie data\");\n        }\n        const data = await response.json();\n        setSearchResults(data.Search || []);\n      } catch (error) {\n        console.error(\"Error fetching movie data:\", error);\n        setError(\"Failed to fetch movie data\");\n      }\n    };\n    fetchMovieData();\n  }, []); // Empty dependency array ensures the effect runs only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Movie Search Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Object.keys(searchResults).length > 0 && /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Title: \", searchResults[0].Title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Year: \", searchResults[0].Year]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Type: \", searchResults[0].Type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: searchResults[0].Poster,\n          alt: `Poster for ${searchResults[0].Title}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)]\n      }, searchResults[0].imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieSearch, \"JfhGochNIqPkY17zyDsXnSE7zLQ=\");\n_c = MovieSearch;\nexport default MovieSearch;\nvar _c;\n$RefreshReg$(_c, \"MovieSearch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MovieSearch","searchResults","setSearchResults","_s","error","setError","fetchMovieData","response","fetch","method","headers","ok","Error","data","json","Search","console","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","length","Title","Year","Type","src","Poster","alt","imdbID","_c","$RefreshReg$"],"sources":["/Users/limingxi/Documents/5610/assignment-03-mingxi-li/client/src/components/MovieSearch.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst MovieSearch = ({ searchResults, setSearchResults  }) => {\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieData = async () => {\n      try {\n        const response = await fetch(\n          \"https://movie-database-alternative.p.rapidapi.com/?s=Avengers Endgame&r=json&page=1\",\n          {\n            method: \"GET\",\n            headers: {\n              \"X-RapidAPI-Key\": \"0fce791ab6msh6f1b63a932f1ed3p1ef0b5jsn414243b1e98c\",\n              \"X-RapidAPI-Host\": \"movie-database-alternative.p.rapidapi.com\",\n            },\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch movie data\");\n        }\n\n        const data = await response.json();\n        setSearchResults(data.Search || []);\n      } catch (error) {\n        console.error(\"Error fetching movie data:\", error);\n        setError(\"Failed to fetch movie data\");\n      }\n    };\n\n    fetchMovieData();\n  }, []); // Empty dependency array ensures the effect runs only once on component mount\n\n  return (\n    <div>\n      <h2>Movie Search Results</h2>\n      {error && <p>{error}</p>}\n      <ul>\n        {Object.keys(searchResults).length > 0 && (\n          <li key={searchResults[0].imdbID}>\n            <p>Title: {searchResults[0].Title}</p>\n            <p>Year: {searchResults[0].Year}</p>\n            <p>Type: {searchResults[0].Type}</p>\n            <img src={searchResults[0].Poster} alt={`Poster for ${searchResults[0].Title}`} />\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n  \n};\n\nexport default MovieSearch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}